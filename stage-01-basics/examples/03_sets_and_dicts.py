"""
Множества (set) и Словари (dict)

Это очень важные структуры данных для соревнований!
Множества и словари работают за O(1) для поиска - это ОЧЕНЬ быстро!
"""

# ============================================
# МНОЖЕСТВА (SET)
# ============================================
print("=== МНОЖЕСТВА (SET) ===")
print("Множество - это коллекция уникальных элементов\n")

# Создание множества
s1 = set()  # пустое множество
s2 = {1, 2, 3, 4, 5}  # множество с элементами
s3 = set([1, 2, 2, 3, 3, 3])  # из списка (дубликаты удалятся)

print(f"Пустое множество: {s1}")
print(f"Множество {1,2,3,4,5}: {s2}")
print(f"Множество из [1,2,2,3,3,3]: {s3}")  # получится {1, 2, 3}

# Добавление элементов
s = set()
s.add(1)
s.add(2)
s.add(3)
s.add(2)  # не добавится, т.к. уже есть
print(f"\nПосле добавления 1,2,3,2: {s}")

# Удаление элементов
s.remove(2)  # удалит 2, выдаст ошибку если элемента нет
print(f"После remove(2): {s}")

s.discard(10)  # удалит если есть, не выдаст ошибку если нет
print(f"После discard(10): {s}")

# Проверка наличия элемента (ОЧЕНЬ ВАЖНО! O(1))
s = {1, 2, 3, 4, 5}
if 3 in s:  # работает за O(1) - мгновенно!
    print(f"\n3 есть в множестве")

if 10 not in s:
    print(f"10 нет в множестве")

# Сравните со списком:
arr = [1, 2, 3, 4, 5]
if 3 in arr:  # работает за O(n) - медленно для больших массивов!
    print("3 есть в списке (но проверка медленная)")

# ============================================
# Операции над множествами
# ============================================
print("\n=== Операции над множествами ===")

a = {1, 2, 3, 4}
b = {3, 4, 5, 6}

print(f"A = {a}")
print(f"B = {b}")

# Объединение (все элементы из обоих множеств)
union = a | b
print(f"Объединение A | B: {union}")  # {1, 2, 3, 4, 5, 6}

# Пересечение (общие элементы)
intersection = a & b
print(f"Пересечение A & B: {intersection}")  # {3, 4}

# Разность (элементы из A, которых нет в B)
difference = a - b
print(f"Разность A - B: {difference}")  # {1, 2}

# Симметрическая разность (элементы, которые есть только в одном множестве)
sym_diff = a ^ b
print(f"Симметрическая разность A ^ B: {sym_diff}")  # {1, 2, 5, 6}

# ============================================
# Практическое применение множеств
# ============================================
print("\n=== Практическое применение ===")

# Задача 1: Удалить дубликаты из списка
arr = [1, 2, 2, 3, 3, 3, 4, 5, 5]
print(f"Список с дубликатами: {arr}")
unique = list(set(arr))
print(f"Уникальные элементы: {unique}")

# Задача 2: Найти общие элементы двух списков
list1 = [1, 2, 3, 4, 5]
list2 = [4, 5, 6, 7, 8]
common = list(set(list1) & set(list2))
print(f"\nОбщие элементы {list1} и {list2}: {common}")

# Задача 3: Проверить, есть ли дубликаты
def has_duplicates(arr):
    """Проверить наличие дубликатов"""
    return len(arr) != len(set(arr))

arr1 = [1, 2, 3, 4, 5]
arr2 = [1, 2, 2, 3, 4]
print(f"\n{arr1} имеет дубликаты? {has_duplicates(arr1)}")
print(f"{arr2} имеет дубликаты? {has_duplicates(arr2)}")

# ============================================
# СЛОВАРИ (DICT)
# ============================================
print("\n\n=== СЛОВАРИ (DICT) ===")
print("Словарь - это коллекция пар ключ-значение\n")

# Создание словаря
d1 = {}  # пустой словарь
d2 = {'apple': 5, 'banana': 3, 'orange': 7}
d3 = dict()  # пустой словарь

print(f"Пустой словарь: {d1}")
print(f"Словарь с фруктами: {d2}")

# Доступ к элементам
d = {'apple': 5, 'banana': 3}
print(f"\nСловарь: {d}")
print(f"Количество яблок: {d['apple']}")

# Безопасный доступ с default значением
count = d.get('orange', 0)  # вернет 0, т.к. 'orange' нет
print(f"Количество апельсинов: {count}")

# Добавление и изменение
d['orange'] = 7  # добавить новый ключ
d['apple'] = 10  # изменить существующий
print(f"После изменений: {d}")

# Удаление
del d['banana']  # удалить ключ
print(f"После удаления банана: {d}")

count = d.pop('orange', 0)  # удалить и вернуть значение
print(f"Удалили апельсин, было: {count}")
print(f"Остался: {d}")

# ============================================
# Итерация по словарю
# ============================================
print("\n=== Итерация по словарю ===")

d = {'apple': 5, 'banana': 3, 'orange': 7}

print("Только ключи:")
for key in d:
    print(f"  {key}")

print("\nКлючи и значения:")
for key, value in d.items():
    print(f"  {key}: {value}")

print("\nТолько значения:")
for value in d.values():
    print(f"  {value}")

# ============================================
# Практическое применение словарей
# ============================================
print("\n=== Практическое применение ===")

# Задача 1: Подсчитать частоту элементов
arr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]
freq = {}
for num in arr:
    freq[num] = freq.get(num, 0) + 1

print(f"Массив: {arr}")
print(f"Частоты: {freq}")

# Еще лучше - использовать Counter
from collections import Counter
freq2 = Counter(arr)
print(f"Частоты (Counter): {freq2}")
print(f"Самые частые 2 элемента: {freq2.most_common(2)}")

# Задача 2: Найти первый неповторяющийся символ
def first_unique_char(s):
    """Найти первый символ, который встречается один раз"""
    # Шаг 1: подсчитываем частоты
    freq = Counter(s)

    # Шаг 2: находим первый с частотой 1
    for i, char in enumerate(s):
        if freq[char] == 1:
            return i

    return -1  # не найден

s = "leetcode"
index = first_unique_char(s)
print(f"\nСтрока: '{s}'")
print(f"Первый уникальный символ на позиции: {index} ('{s[index]}')")

# Задача 3: Группировка анаграмм
def group_anagrams(words):
    """Сгруппировать анаграммы"""
    groups = {}

    for word in words:
        # Сортируем буквы - это будет ключ
        key = ''.join(sorted(word))

        # Добавляем слово в группу
        if key not in groups:
            groups[key] = []
        groups[key].append(word)

    return list(groups.values())

words = ["eat", "tea", "tan", "ate", "nat", "bat"]
result = group_anagrams(words)
print(f"\nСлова: {words}")
print(f"Группы анаграмм: {result}")

# ============================================
# defaultdict - словарь с default значениями
# ============================================
print("\n=== defaultdict ===")

from collections import defaultdict

# Обычный словарь - нужно проверять наличие ключа
d = {}
arr = [1, 2, 2, 3, 3, 3]
for num in arr:
    if num not in d:  # приходится проверять!
        d[num] = 0
    d[num] += 1
print(f"Обычный словарь: {d}")

# defaultdict - не нужно проверять!
d = defaultdict(int)  # default значение = 0
for num in arr:
    d[num] += 1  # просто увеличиваем, проверка не нужна!
print(f"defaultdict: {dict(d)}")

# defaultdict для списков
d = defaultdict(list)
d['fruits'].append('apple')
d['fruits'].append('banana')
d['vegetables'].append('carrot')
print(f"defaultdict(list): {dict(d)}")

# ============================================
# Задачи для практики
# ============================================
print("\n=== Задачи для практики ===")

# Задача 1: Two Sum (очень популярная задача!)
def two_sum(arr, target):
    """
    Найти индексы двух чисел, сумма которых равна target
    Используем словарь для O(n) времени вместо O(n^2)
    """
    seen = {}  # число -> индекс

    for i, num in enumerate(arr):
        complement = target - num

        if complement in seen:
            return [seen[complement], i]

        seen[num] = i

    return None

arr = [2, 7, 11, 15]
target = 9
result = two_sum(arr, target)
print(f"\nМассив: {arr}, target: {target}")
print(f"Индексы: {result} (числа: {arr[result[0]]} + {arr[result[1]]} = {target})")

# Задача 2: Проверка на анаграмму
def is_anagram(s1, s2):
    """Проверить, являются ли строки анаграммами"""
    # Способ 1: через Counter
    return Counter(s1) == Counter(s2)

    # Способ 2: через сортировку
    # return sorted(s1) == sorted(s2)

s1 = "listen"
s2 = "silent"
print(f"\n'{s1}' и '{s2}' - анаграммы? {is_anagram(s1, s2)}")

# Задача 3: Найти элемент, встречающийся более n/2 раз
def majority_element(arr):
    """Найти элемент, который встречается больше половины раз"""
    freq = Counter(arr)
    n = len(arr)

    for num, count in freq.items():
        if count > n // 2:
            return num

    return None

arr = [2, 2, 1, 1, 1, 2, 2]
result = majority_element(arr)
print(f"\nМассив: {arr}")
print(f"Элемент большинства: {result}")

print("\n=== Конец примеров ===")
print("\nВАЖНО помнить:")
print("✓ Множества и словари работают за O(1) для поиска")
print("✓ Списки работают за O(n) для поиска")
print("✓ Используйте set для проверки 'in', если нужна скорость")
print("✓ Используйте dict для подсчета частот и маппинга")
