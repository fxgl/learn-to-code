"""
Этап 2: Математика и жадные алгоритмы
Пример 4: Комбинаторика

Запустите этот файл, чтобы увидеть примеры работы с:
- Факториалами
- Перестановками
- Размещениями
- Сочетаниями (биномиальными коэффициентами)
- Треугольником Паскаля
- Числами Каталана

python3 04_combinatorics.py
"""

import math
from math import factorial, comb, perm
from itertools import permutations, combinations

print("=" * 60)
print("КОМБИНАТОРИКА")
print("=" * 60)

# ============================================================
# 1. ФАКТОРИАЛЫ
# ============================================================

print("\n1. ФАКТОРИАЛЫ (n!)")
print("-" * 60)

print("Факториал: n! = 1 × 2 × 3 × ... × n")
print("Количество способов упорядочить n объектов\n")

# Встроенная функция
for n in range(10):
    print(f"{n}! = {factorial(n)}")

print(f"\n10! = {factorial(10):,}")
print(f"20! = {factorial(20):,}")

# Ручная реализация
def factorial_manual(n):
    """Вычисление факториала"""
    result = 1
    for i in range(2, n + 1):
        result *= i
    return result

print(f"\nПроверка: 5! = {factorial_manual(5)}")

# С модулем (для больших чисел)
def factorial_mod(n, mod):
    """Факториал по модулю"""
    result = 1
    for i in range(2, n + 1):
        result = (result * i) % mod
    return result

MOD = 10**9 + 7
print(f"\n1000! mod {MOD} = {factorial_mod(1000, MOD)}")

# ============================================================
# 2. ПЕРЕСТАНОВКИ (Permutations)
# ============================================================

print("\n\n2. ПЕРЕСТАНОВКИ P(n) = n!")
print("-" * 60)

print("Перестановка - упорядочение n элементов")
print("Формула: P(n) = n!\n")

# Генерация всех перестановок
items = [1, 2, 3]
all_perms = list(permutations(items))

print(f"Перестановки {items}:")
for i, perm in enumerate(all_perms, 1):
    print(f"  {i}. {perm}")

print(f"\nВсего: {len(all_perms)} = 3! = {factorial(3)}")

# Перестановки строки
word = "ABC"
word_perms = list(permutations(word))
print(f"\nПерестановки '{word}':")
for perm in word_perms:
    print(f"  {''.join(perm)}")

# ============================================================
# 3. РАЗМЕЩЕНИЯ (Arrangements)
# ============================================================

print("\n\n3. РАЗМЕЩЕНИЯ A(n, k) = n!/(n-k)!")
print("-" * 60)

print("Размещение - выбор k элементов из n с учётом порядка")
print("Формула: A(n, k) = n × (n-1) × ... × (n-k+1)\n")

# Встроенная функция
print("A(5, 2) - выбрать 2 из 5 с порядком:")
print(f"  Формула: 5!/(5-2)! = 5!/3! = {perm(5, 2)}")

# Ручная реализация
def arrangement(n, k):
    """A(n, k) = n!/(n-k)!"""
    return factorial(n) // factorial(n - k)

print(f"  Проверка: {arrangement(5, 2)}")

# Генерация всех размещений
items = [1, 2, 3, 4]
k = 2
all_arr = list(permutations(items, k))

print(f"\nРазмещения из {items} по {k}:")
for i, arr in enumerate(all_arr[:10], 1):  # первые 10
    print(f"  {i}. {arr}")

print(f"... всего {len(all_arr)} размещений")
print(f"Проверка: A(4, 2) = {perm(4, 2)}")

# ============================================================
# 4. СОЧЕТАНИЯ (Combinations)
# ============================================================

print("\n\n4. СОЧЕТАНИЯ C(n, k) = n!/(k!×(n-k)!)")
print("-" * 60)

print("Сочетание - выбор k элементов из n БЕЗ учёта порядка")
print("Формула: C(n, k) = n!/(k! × (n-k)!)\n")

# Встроенная функция
print("C(5, 2) - выбрать 2 из 5 без порядка:")
print(f"  Формула: 5!/(2!×3!) = {comb(5, 2)}")

# Ручная реализация (стабильная)
def binomial(n, k):
    """C(n, k) - биномиальный коэффициент"""
    if k > n - k:  # оптимизация: C(n,k) = C(n,n-k)
        k = n - k

    result = 1
    for i in range(k):
        result = result * (n - i) // (i + 1)

    return result

print(f"  Проверка: {binomial(5, 2)}")

# Генерация всех сочетаний
items = [1, 2, 3, 4]
k = 2
all_comb = list(combinations(items, k))

print(f"\nСочетания из {items} по {k}:")
for i, c in enumerate(all_comb, 1):
    print(f"  {i}. {c}")

print(f"\nВсего: {len(all_comb)} = C(4, 2) = {comb(4, 2)}")

# ============================================================
# 5. ТРЕУГОЛЬНИК ПАСКАЛЯ
# ============================================================

print("\n\n5. ТРЕУГОЛЬНИК ПАСКАЛЯ")
print("-" * 60)

print("Каждое число = сумма двух чисел сверху")
print("Строка n содержит биномиальные коэффициенты C(n, k)\n")


def pascal_triangle(n):
    """Построить треугольник Паскаля до n строк"""
    triangle = [[1]]

    for i in range(1, n):
        row = [1]
        for j in range(1, i):
            # C(n, k) = C(n-1, k-1) + C(n-1, k)
            row.append(triangle[i-1][j-1] + triangle[i-1][j])
        row.append(1)
        triangle.append(row)

    return triangle


# Построить и вывести треугольник
triangle = pascal_triangle(10)

print("Треугольник Паскаля (первые 10 строк):")
for i, row in enumerate(triangle):
    # Форматирование для красоты
    spaces = " " * (30 - i * 3)
    print(f"{spaces}{row}")

print("\nСвойства:")
print("  - Строка n: биномиальные коэффициенты C(n, 0), C(n, 1), ..., C(n, n)")
print("  - Симметричен: C(n, k) = C(n, n-k)")
print("  - Сумма строки n = 2^n")

# Проверка суммы
for i in range(10):
    row_sum = sum(triangle[i])
    expected = 2**i
    print(f"  Сумма строки {i}: {row_sum} = 2^{i} = {expected}")

# ============================================================
# 6. ЧИСЛА КАТАЛАНА
# ============================================================

print("\n\n6. ЧИСЛА КАТАЛАНА")
print("-" * 60)

print("Каталан C_n = C(2n, n) / (n+1)")
print("Применения:")
print("  - Правильные скобочные последовательности")
print("  - Разные бинарные деревья с n вершинами")
print("  - Способы триангуляции выпуклого (n+2)-угольника\n")


def catalan(n):
    """n-е число Каталана"""
    return comb(2*n, n) // (n + 1)


print("Первые числа Каталана:")
for i in range(10):
    print(f"  C_{i} = {catalan(i)}")

# Пример: скобочные последовательности
print("\nПример: правильные скобочные последовательности длины 6 (n=3)")
sequences = [
    "((()))",
    "(()())",
    "(())()",
    "()(())",
    "()()()"
]
for seq in sequences:
    print(f"  {seq}")
print(f"Всего: {len(sequences)} = C_3 = {catalan(3)}")

# ============================================================
# 7. ПРАКТИЧЕСКИЕ ПРИМЕРЫ
# ============================================================

print("\n\n7. ПРАКТИЧЕСКИЕ ПРИМЕРЫ")
print("-" * 60)

# Пример 1: Комитет
print("\nПример 1: Из 10 человек выбрать комитет из 3 человек")
total = comb(10, 3)
print(f"Количество способов: C(10, 3) = {total}")

# Пример 2: Пароли
print("\nПример 2: Сколько паролей из 4 разных цифр?")
total = perm(10, 4)
print(f"Количество паролей: A(10, 4) = {total}")

# Пример 3: Раздача карт
print("\nПример 3: Сколько способов раздать 5 карт из колоды (52 карты)?")
total = comb(52, 5)
print(f"Количество способов: C(52, 5) = {total:,}")

# Пример 4: Пути в сетке
print("\nПример 4: Пути в сетке 3×3 (только вправо и вниз)")
print("Нужно сделать 3 шага вправо и 3 вниз, всего 6 шагов")
print("Выбираем 3 позиции для 'вправо' из 6")
total = comb(6, 3)
print(f"Количество путей: C(6, 3) = {total}")

# Визуализация
print("\nВизуализация:")
print("  S → → → ")
print("  ↓ ↓ ↓ ↓")
print("  → → → F")
print("Примеры путей: RRRDDD, RDRDRD, DRRDRД, ...")

# Пример 5: Деление конфет
print("\nПример 5: Раздать 10 конфет 3 детям (любое количество каждому)")
print("Это 'разбиения с повторениями': C(n+k-1, k-1)")
n, k = 10, 3
total = comb(n + k - 1, k - 1)
print(f"Количество способов: C(10+3-1, 3-1) = C(12, 2) = {total}")

# ============================================================
# 8. ФОРМУЛЫ И СВОЙСТВА
# ============================================================

print("\n\n8. ФОРМУЛЫ И СВОЙСТВА")
print("-" * 60)

print("""
ФАКТОРИАЛЫ:
  n! = 1 × 2 × 3 × ... × n
  0! = 1 (по определению)

РАЗМЕЩЕНИЯ (с порядком):
  A(n, k) = n!/(n-k)!
  Выбрать k из n с учётом порядка

СОЧЕТАНИЯ (без порядка):
  C(n, k) = n!/(k!×(n-k)!)
  Выбрать k из n без учёта порядка

СВОЙСТВА СОЧЕТАНИЙ:
  C(n, k) = C(n, n-k)           (симметрия)
  C(n, k) = C(n-1, k-1) + C(n-1, k)   (рекуррентная формула)
  C(n, 0) = C(n, n) = 1
  ∑C(n, k) = 2^n                (сумма строки треугольника Паскаля)

ЧИСЛА КАТАЛАНА:
  C_n = C(2n, n) / (n+1)
  C_n = C_0×C_{n-1} + C_1×C_{n-2} + ... + C_{n-1}×C_0
""")

# ============================================================
# 9. ЧАСТЫЕ ОШИБКИ
# ============================================================

print("\n\n9. ЧАСТЫЕ ОШИБКИ")
print("-" * 60)

print("""
❌ НЕПРАВИЛЬНО: factorial(n) // factorial(k) // factorial(n-k)
   Проблема: переполнение для больших n

✅ ПРАВИЛЬНО: используйте math.comb() или стабильную формулу

❌ НЕПРАВИЛЬНО: C(n, k) для больших n без модуля
   Проблема: очень большие числа

✅ ПРАВИЛЬНО: вычисляйте с модулем или используйте предподсчёт

❌ НЕПРАВИЛЬНО: перебор всех вариантов для подсчёта
   Проблема: O(n!) - слишком медленно

✅ ПРАВИЛЬНО: используйте формулы - O(1) или O(k)
""")

# ============================================================
# 10. ЗАДАЧИ ДЛЯ ПРАКТИКИ
# ============================================================

print("\n\n10. ЗАДАЧИ ДЛЯ ПРАКТИКИ")
print("-" * 60)

print("""
1. LeetCode #62 - Unique Paths
   https://leetcode.com/problems/unique-paths/
   Пути в сетке (комбинаторика)

2. LeetCode #118 - Pascal's Triangle
   https://leetcode.com/problems/pascals-triangle/
   Построить треугольник Паскаля

3. LeetCode #119 - Pascal's Triangle II
   https://leetcode.com/problems/pascals-triangle-ii/
   n-я строка треугольника

4. LeetCode #70 - Climbing Stairs
   https://leetcode.com/problems/climbing-stairs/
   Связь с числами Фибоначчи и комбинаторикой

5. Codeforces - Combinatorics problems
   Задачи с тегом "combinatorics"
""")

print("\n" + "=" * 60)
print("ИТОГИ")
print("=" * 60)

print("""
✅ Факториал: количество перестановок n элементов
✅ Размещения A(n,k): выбор k из n С порядком
✅ Сочетания C(n,k): выбор k из n БЕЗ порядка
✅ Треугольник Паскаля: C(n,k) = C(n-1,k-1) + C(n-1,k)
✅ Числа Каталана: правильные скобочные последовательности

Используйте встроенные функции:
  - math.factorial(n)
  - math.comb(n, k)
  - math.perm(n, k)

Для больших чисел - вычисляйте с модулем!
""")

print("=" * 60)
